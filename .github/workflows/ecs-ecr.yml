name: Full CI/CD Pipeline with ECR & ECS (EC2)

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'readme.md'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Set up AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: 🛡️ Snyk Vulnerability Scan
      uses: snyk/actions/docker@0.4.0
      continue-on-error: true
      with:
        image: ${{ secrets.ECR_REPOSITORY_URI }}:latest
        command: monitor
        args: --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: 🧪 Run Lint and Tests
      run: |
        npm install
        npm run lint
        npm test -- --coverage

    - name: 📦 Upload Test Coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/

    - name: Run SonarCloud Scan
      run: |
        sonar-scanner \
         -Dsonar.projectKey=test-deployment \
         -Dsonar.organization=filbertnanablessing \
         -Dsonar.host.url=https://sonarcloud.io \
         -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
         -Dsonar.sources=. \
         -Dsonar.exclusions=node_modules/**

    - name: 🔐 Secrets Scan (Optional)
      run: |
        pip install detect-secrets
        detect-secrets scan > .secrets.baseline
        detect-secrets audit .secrets.baseline

    - name: 🐳 Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: 🛠️ Build Docker Image
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:latest .

    - name: 🏷️ Tag Docker Image
      run: |
        docker tag ${{ secrets.ECR_REPOSITORY_URI }}:latest ${{ secrets.ECR_REPOSITORY_URI }}:latest

    - name: 🚀 Push Docker Image to Amazon ECR
      run: |
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

    - name: 📝 Render ECS Task Definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ./task-definition.json
        container-name: ${{ secrets.CONTAINER_NAME }}
        image: ${{ secrets.ECR_REPOSITORY_URI }}:latest

    - name: 🧾 Debug Task Definition
      run: cat ${{ steps.task-def.outputs.task-definition }}

    - name: 🚢 Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true